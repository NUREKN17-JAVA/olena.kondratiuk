package ua.nure.cs.kondratiuk.usermanagement.db;

import java.io.IOException;
import java.util.Properties;

public abstract class DaoFactory {
	
	protected static final String USER_DAO = "ua.nure.cs.kondratiuk.usermanagement.db.Dao";
	private static final String DAO_FACTORY = "dao.factory";
	protected static Properties properties;
	
	
	private static DaoFactory instance;
	
	static {
		properties = new Properties();
		try {
			properties.load(DaoFactory.class.getClassLoader().getResourceAsStream("settings.properties"));
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}
	
	/**
	 * Create exactly one DaoFactory
	 * @return instance of DaoFactory
	 */
	public static synchronized DaoFactory getInstance() {
		if (instance == null) {
			Class factoryClass;
			try {
				factoryClass = Class.forName(properties
						.getProperty(DAO_FACTORY));
				instance = (DaoFactory) factoryClass.newInstance();
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
		}
		return instance;
	}
	public Dao getUserDao() {
		Dao result = null;
		try {
			Class clazz = Class.forName(properties.getProperty(USER_DAO));
			result = (Dao) clazz.newInstance();
			result.setConnectoinFactory(getConnectionFactory());
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		return result;
	}
	protected DaoFactory() {}
	/**
	 * Initisliaze properties of object from param java.util.Properties
	 * @param properties
	 */
	public static void init(Properties prop) {
		properties = prop;
		instance = null;
	}
	private ConnectionFactory getConnectionFactory () {
	String user = properties.getProperty("connection.user");
	String password = properties.getProperty("connection.password");
	String url = properties.getProperty("connection.url");
	String driver = properties.getProperty("connection.driver");
	return new ConnectionFactoryImpl(driver, url, user, password);		
}

}
//import java.io.IOException;
//import java.util.Properties;
//
//public class DaoFactory {
//	private static final String USER_DAO = "ua.nure.cs.kondratiuk.usermanagement.db.Dao";
//	private static final String DAO_FACTORY = "dao.factory";
//	private final static Properties properties;
//	
//	private final static DaoFactory INSTANCE = new DaoFactory();
//	
//	private DaoFactory() {
//		properties = new Properties();
//		try {
//			properties.load(getClass().getClassLoader().getResourceAsStream("settings.properties"));
//		} catch (IOException e) {
//			throw new RuntimeException(e);
//		}
//	}
//	//private static DaoFactory instance;
////	protected static Properties properties;
//	
////	static {
////		properties = new Properties();
////		try {
////			properties.load(DaoFactory.class.getClassLoader().getResourceAsStream("settings.properties"));
////		} catch (IOException e) {
////			throw new RuntimeException(e);
////		}
////	}
//	
//	private ConnectionFactory getConnectionFactory () {
//		String user = properties.getProperty("connection.user");
//		String password = properties.getProperty("connection.password");
//		String url = properties.getProperty("connection.url");
//		String driver = properties.getProperty("connection.driver");
//		return new ConnectionFactoryImpl(driver, url, user, password);		
//	}
//	
//	public Dao getDao () {
//		Dao result = null;
//		try {
//			Class clazz = Class.forName(properties.getProperty(USER_DAO));
//			result = (Dao) clazz.newInstance();
//			result.setConnectoinFactory(getConnectionFactory());
//		} catch (Exception e) {
//			throw new RuntimeException(e);
//		}		
//		return result;
//	}
//	
//	public static synchronized DaoFactory getInstance() {
//		if (INSTANCE == null) {
//			Class<?> factoryClass;
//			try {
//				factoryClass = Class.forName(properties.getProperty(DAO_FACTORY));
//				INSTANCE = (DaoFactory) factoryClass.newInstance();
//			} catch (Exception e) {
//				throw new RuntimeException(e);
//			}
//		}
//		return INSTANCE;
//	}
//	
////	public static DaoFactory getInstance() {
////        return INSTANCE;
////    }
//}
	
